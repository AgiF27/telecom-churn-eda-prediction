# -*- coding: utf-8 -*-
"""Customer Churn Analysis and Prediction in Telecom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nGsdRTcVJyvzzv9jmaKtwei-v4h6FNbH

Latar belakang: Dalam industri telekomunikasi, tingkat churn (pelanggan yang berhenti menggunakan layanan) adalah indikator penting dalam menilai kepuasan dan loyalitas pelanggan. Untuk mempertahankan pelanggan dan meningkatkan pendapatan, perusahaan harus memahami karakteristik dan perilaku pelanggan melalui data.

Pertanyaan bisnis:
1. Segementasi Pelanggan
  
  - Apa Apa saja segmen pelanggan yang dapat dibentuk berdasarkan perilaku penggunaan layanan seperti jumlah panggilan, SMS, dan data yang digunakan?


2. Churn dan Risiko

  - Apakah pelanggan dari provider tertentu memiliki tingkat churn yang lebih tinggi
  
  - Adakah hubungan antara jumlah pemakaian layanan (panggilan/SMS/data) dengan kemungkinan churn?

  - Apakah pelanggan dengan estimasi gaji rendah memiliki risiko churn yang lebih tinggi?

3. Strategi CRM

  - Segmen pelanggan mana yang memiliki pemakaian tinggi tetapi tetap menunjukkan risiko churn tinggi?

  - Bagaimana churn rate berdasarkan usia atau jumlah tanggungan?

# 1. Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.preprocessing import StandardScaler
from scipy.stats import ttest_ind, mannwhitneyu, f_oneway
import statsmodels.api as sm
from scipy.stats import ttest_ind, chi2_contingency

"""# 2. Data Understanding"""

df = pd.read_csv("telecom_churn.csv")
df

df.info()

"""| Nama Variabel          | Keterangan                                                            | Contoh Nilai       |
|------------------------|------------------------------------------------------------------------|------------------------------|
| customer_id            | ID unik untuk setiap pelanggan                                         | 243549                        |
| telecom_partner        | Nama penyedia layanan telekomunikasi                                  | Reliance Jio, BSNL      |
| gender                 | Jenis kelamin pelanggan                                                | M / F                    |
| age                    | Usia pelanggan                                                         | 28, 52, 59                   |
| state                  | Negara bagian tempat pelanggan tinggal                                | Mizoram, Assam        |
| city                   | Kota tempat pelanggan tinggal                                          | Delhi, Kolkata           |
| pincode                | Kode pos pelanggan                                                     | 110295              |
| date_of_registration   | Tanggal pelanggan mendaftar                                            | '2020-01-01'                |
| num_dependents         | Jumlah tanggungan (anak/keluarga) pelanggan                           | 0, 1, 2, 3                      |
| estimated_salary       | Perkiraan gaji pelanggan (dalam INR)                                  | 38722, 148828               |
| calls_made             | Jumlah panggilan yang dilakukan                                        | 44, 28, 80                   |
| sms_sent               | Jumlah SMS yang dikirim                                                | 9, 45, 7                   |
| data_used              | Jumlah data internet yang digunakan                 | 4102, 7521, 1125              |
| churn                  | Status churn (1 = berhenti, 0 = tetap pelanggan)                       | 0 atau 1                     |

"""

df.describe()

df.describe(include=object)

"""# 3. Data Cleansing"""

df = df.drop(columns=['customer_id', 'pincode'])

df[df['calls_made']<0][['calls_made']]

numeric_cols = df.select_dtypes(include='number').columns
df = df [(df[numeric_cols] >= 0).all(axis=1)]

df.describe()

df.isnull().sum()

df.duplicated().sum()

"""# 4. Exploratory Data Analysis (EDA)

## Distribusi data
"""

fitur_numerik = ['customer_id', 'age', 'pincode', 'num_dependents', 'estimated_salary', 'calls_made', 'sms_sent', 'data_used', 'churn']
fitur_kategorik = ["telecom_partner", "gender", "state", "city", "date_of_registration"]

feature = fitur_kategorik[0]
count_TP = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_TP = pd.DataFrame({"Jumlah Sampel": count_TP, "Persentase": percent.round(1)})
print(df_TP)
count_TP.plot(kind="bar", title=feature)
plt.xlabel("Telecom Partner")
plt.show()

feature = fitur_kategorik[1]
count_gender = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_gender = pd.DataFrame({"Jumlah Sampel": count_gender, "Persentase": percent.round(1)})
print(df_gender)
count_gender.plot(kind="bar", title=feature)
plt.xlabel("Gender")
plt.show()

feature = fitur_kategorik[2]
count_state = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_state = pd.DataFrame({"Jumlah Sampel": count_state, "Persentase": percent.round(1)})
print(df_state)
colors = plt.cm.tab10.colors[:len(count_state)]
ax = count_state.plot(kind="bar",
                     title=feature,
                     color=colors,
                     figsize=(10, 6))
plt.xlabel("State")
plt.ylabel("Jumlah")
plt.xticks(rotation=45, ha='right')
plt.show()

feature = fitur_kategorik[3]
count_city = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_city = pd.DataFrame({"Jumlah Sampel": count_city, "Persentase": percent.round(1)})
print(df_city)
colors = plt.cm.tab10.colors[:len(count_city)]
ax = count_city.plot(kind="bar",
                     title=feature,
                     color=colors,
                     figsize=(10, 6))
plt.xlabel("State")
plt.ylabel("Jumlah")
plt.xticks(rotation=45, ha='right')
plt.show()

df.hist(bins = 50, figsize = (22, 15))
plt.show()

df.head()

df.describe()

"""## 1.1 Segmen Panggilan"""

def categorize_calls(x):
    if x > 60:
        return 'Banyak'
    elif x >= 25:
        return 'Sedang'
    else:
        return 'Sedikit'

df['kategori_panggilan'] = df['calls_made'].apply(categorize_calls)

def categorize_income(x):
    if x < 60000:
        return 'Rendah'
    elif x <= 100000:
        return 'Sedang'
    else:
        return 'Tinggi'

df['kategori_pendapatan'] = df['estimated_salary'].apply(categorize_income)

sns.set(style="whitegrid")

jumlah_kategori = df['kategori_panggilan'].value_counts().reindex(['Sedikit', 'Sedang', 'Banyak'])
total_pelanggan = jumlah_kategori.sum()

plt.figure(figsize=(6, 4))
bars = sns.barplot(
    x=jumlah_kategori.index,
    y=jumlah_kategori.values
)
plt.title('Jumlah Pelanggan per Kategori Panggilan')
plt.xlabel('Kategori Panggilan')
plt.ylabel('Jumlah Pelanggan')

for i, bar in enumerate(bars.patches):
    height = bar.get_height()
    persen = (height / total_pelanggan) * 100
    plt.text(
        bar.get_x() + bar.get_width()/2,
        height / 2,
        f'{int(height)}\n({persen:.1f}%)',
        ha='center', va='center', color='black', fontsize=10
    )

plt.tight_layout()
plt.show()

rata_rata_usia = df.groupby('kategori_panggilan')['age'].mean()
rata_rata_usia = rata_rata_usia.reindex(['Sedikit', 'Sedang', 'Banyak'])

plt.figure(figsize=(6, 4))
bars = sns.barplot(
    x=rata_rata_usia.index,
    y=rata_rata_usia.values,
)

plt.title('Rata-rata Usia Pelanggan per Kategori Panggilan', fontsize=13)
plt.xlabel('Kategori Panggilan')
plt.ylabel('Rata-rata Usia (tahun)')

for bar in bars.patches:
    height = bar.get_height()
    plt.text(
        bar.get_x() + bar.get_width()/2,
        height + 0.8,
        f"{height:.1f}",
        ha='center', va='bottom', fontsize=10
    )

plt.ylim(0, rata_rata_usia.max() + 10)
plt.tight_layout()
plt.show()

churn_counts = df.groupby(['kategori_panggilan', 'churn']).size().unstack(fill_value=0)
churn_counts.columns = ['Tetap', 'Berhenti']
churn_counts = churn_counts.reset_index().melt(id_vars='kategori_panggilan',
                                               value_vars=['Tetap', 'Berhenti'],
                                               var_name='Status',
                                               value_name='Jumlah')

total_per_kategori = churn_counts.groupby('kategori_panggilan')['Jumlah'].transform('sum')
churn_counts['Persentase'] = (churn_counts['Jumlah'] / total_per_kategori * 100).round(1)

plt.figure(figsize=(8, 5))
ax = sns.barplot(data=churn_counts, x='kategori_panggilan', y='Jumlah', hue='Status',
                 palette={'Tetap': 'skyblue', 'Berhenti': 'salmon'})

for p in ax.patches:
    height = p.get_height()
    if height > 0:
        ax.text(
            x=p.get_x() + p.get_width() / 2,
            y=height / 2,
            s=f"{height:.0f} ({p.get_height() / total_per_kategori[churn_counts.index[ax.patches.index(p)]] * 100:.1f}%)",
            ha='center',
            va='center',
            fontsize=9,
            color='black'
        )

plt.title("Jumlah Pelanggan Tetap & Berhenti per Kategori Panggilan")
plt.xlabel("Kategori Panggilan")
plt.ylabel("Jumlah Pelanggan")
plt.legend(title='Status')
plt.tight_layout()
plt.show()

gender_counts = df.groupby(['kategori_panggilan', 'gender']).size().reset_index(name='Jumlah')

total_per_kategori = gender_counts.groupby('kategori_panggilan')['Jumlah'].transform('sum')
gender_counts['Persentase'] = (gender_counts['Jumlah'] / total_per_kategori * 100).round(1)

plt.figure(figsize=(8, 5))
ax = sns.barplot(data=gender_counts, x='kategori_panggilan', y='Jumlah',
                 hue='gender', palette='Set2')

for p in ax.patches:
    height = p.get_height()
    if height > 0:
        ax.text(
            x=p.get_x() + p.get_width() / 2,
            y=height / 2,
            s=f"{height:.0f} ({height / total_per_kategori[gender_counts.index[ax.patches.index(p)]] * 100:.1f}%)",
            ha='center',
            va='center',
            fontsize=9,
            color='black'
        )

plt.title("Distribusi Gender per Kategori Panggilan")
plt.xlabel("Kategori Panggilan")
plt.ylabel("Jumlah Pelanggan")
plt.legend(title='Gender')
plt.tight_layout()
plt.show()

pendapatan_counts = df.groupby(['kategori_panggilan', 'kategori_pendapatan']).size().reset_index(name='Jumlah')
totals = pendapatan_counts.groupby('kategori_panggilan')['Jumlah'].sum().to_dict()

plt.figure(figsize=(12, 8))
ax = sns.barplot(data=pendapatan_counts, x='kategori_panggilan', y='Jumlah',
                 hue='kategori_pendapatan',
                 palette={'Rendah': '#f4a582', 'Sedang': '#92c5de', 'Tinggi': '#0571b0'})

for bar in ax.patches:
    height = bar.get_height()
    if height > 0:
        x = bar.get_x() + bar.get_width() / 2
        y = height + 1000
        kategori = bar.get_x()
        kategori_label = bar.get_label().split("/")[0] if "/" in bar.get_label() else None

        kategori_panggilan = bar.get_label()
        x_tick_labels = [tick.get_text() for tick in ax.get_xticklabels()]
        idx = round(bar.get_x() + bar.get_width() / 2)
        if idx < len(x_tick_labels):
            kategori_panggilan = x_tick_labels[idx]

        total_kategori = totals.get(kategori_panggilan, 1)
        percentage = (height / total_kategori) * 100

        ax.text(x, y, f'{int(height)}\n({percentage:.1f}%)',
                ha='center', va='bottom', fontsize=9, weight='bold')

plt.title("Distribusi Pendapatan per Kategori Panggilan")
plt.xlabel("Kategori Panggilan")
plt.ylabel("Jumlah Pelanggan")
plt.legend(title='Pendapatan', loc='upper right')
plt.tight_layout()
plt.show()

"""## 1.2 SMS"""

def kategori_sms(jml_sms):
    if jml_sms < 25:
        return 'Sedikit'
    elif jml_sms < 37:
        return 'Sedang'
    else:
        return 'Banyak'

df['kategori_sms'] = df['sms_sent'].apply(kategori_sms)

jumlah_kategori_sms = df['kategori_sms'].value_counts().reindex(['Sedikit', 'Sedang', 'Banyak'])
total_sms = jumlah_kategori_sms.sum()

plt.figure(figsize=(6, 4))
bars = sns.barplot(x=jumlah_kategori_sms.index, y=jumlah_kategori_sms.values)
plt.title('Jumlah Pelanggan per Kategori SMS')
plt.xlabel('Kategori SMS')
plt.ylabel('Jumlah Pelanggan')

for bar in bars.patches:
    height = bar.get_height()
    persen = (height / total_sms) * 100
    plt.text(bar.get_x() + bar.get_width()/2, height/2, f'{int(height)}\n({persen:.1f}%)',
             ha='center', va='center', fontsize=10, color='black')

plt.tight_layout()
plt.show()

rata_usia_sms = df.groupby('kategori_sms')['age'].mean().reindex(['Sedikit', 'Sedang', 'Banyak'])

plt.figure(figsize=(6, 4))
bars = sns.barplot(x=rata_usia_sms.index, y=rata_usia_sms.values)
plt.title('Rata-rata Usia per Kategori SMS')
plt.xlabel('Kategori SMS')
plt.ylabel('Rata-rata Usia (tahun)')

for bar in bars.patches:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 0.8, f"{height:.1f}",
             ha='center', va='bottom', fontsize=10)

plt.ylim(0, rata_usia_sms.max() + 10)
plt.tight_layout()
plt.show()

churn_sms = df.groupby(['kategori_sms', 'churn']).size().unstack(fill_value=0).reindex(['Sedikit', 'Sedang', 'Banyak'])
churn_sms.columns = ['Tetap', 'Berhenti']
churn_sms_plot = churn_sms.reset_index().melt(id_vars='kategori_sms', value_name='Jumlah', var_name='Status')

total_sms_kat = churn_sms_plot.groupby('kategori_sms')['Jumlah'].transform('sum')
churn_sms_plot['Persen'] = churn_sms_plot['Jumlah'] / total_sms_kat * 100

plt.figure(figsize=(7, 4))
bars = sns.barplot(data=churn_sms_plot, x='kategori_sms', y='Jumlah', hue='Status', palette=['skyblue', 'salmon'])

for bar, (_, row) in zip(bars.patches, churn_sms_plot.iterrows()):
    height = bar.get_height()
    persen = row['Persen']
    if height > 0:
        plt.text(bar.get_x() + bar.get_width()/2, height/2,
                 f"{persen:.1f}%", ha='center', va='center',
                 fontsize=9, color='black')

plt.title('Churn Status per Kategori SMS')
plt.xlabel('Kategori SMS')
plt.ylabel('Jumlah Pelanggan')
plt.legend(title='Status')
plt.tight_layout()
plt.show()

gender_sms_counts = df.groupby(['kategori_sms', 'gender']).size().reset_index(name='Jumlah')

total_per_kategori = gender_sms_counts.groupby('kategori_sms')['Jumlah'].transform('sum')
gender_sms_counts['Persen'] = 100 * gender_sms_counts['Jumlah'] / total_per_kategori


plt.figure(figsize=(7, 4))
bars = sns.barplot(data=gender_sms_counts, x='kategori_sms', y='Jumlah', hue='gender', palette='Set2')

for bar, (_, row) in zip(bars.patches, gender_sms_counts.iterrows()):
    height = bar.get_height()
    persen = row['Persen']
    if height > 0:
        plt.text(bar.get_x() + bar.get_width()/2, height/2,
                 f"{persen:.1f}%", ha='center', va='center',
                 fontsize=9, color='black')

plt.title('Distribusi Gender per Kategori SMS')
plt.xlabel('Kategori SMS')
plt.ylabel('Jumlah Pelanggan')
plt.legend(title='Gender')
plt.tight_layout()
plt.show()

pendapatan_sms = df.groupby(['kategori_sms', 'kategori_pendapatan']).size().unstack(fill_value=0).reindex(['Sedikit', 'Sedang', 'Banyak'])
pendapatan_sms_plot = pendapatan_sms.reset_index().melt(id_vars='kategori_sms', value_name='Jumlah', var_name='Pendapatan')

total_pendapatan_sms = pendapatan_sms_plot.groupby('kategori_sms')['Jumlah'].transform('sum')
pendapatan_sms_plot['Persen'] = pendapatan_sms_plot['Jumlah'] / total_pendapatan_sms * 100

plt.figure(figsize=(7, 4))
bars = sns.barplot(data=pendapatan_sms_plot, x='kategori_sms', y='Jumlah', hue='Pendapatan', palette='coolwarm')

for bar, (_, row) in zip(bars.patches, pendapatan_sms_plot.iterrows()):
    height = bar.get_height()
    persen = row['Persen']
    if height > 0:
        plt.text(bar.get_x() + bar.get_width()/2, height/2,
                 f"{persen:.1f}%", ha='center', va='center',
                 fontsize=9, color='black')

plt.title('Distribusi Pendapatan per Kategori SMS')
plt.xlabel('Kategori SMS')
plt.ylabel('Jumlah Pelanggan')
plt.legend(title='Pendapatan')
plt.tight_layout()
plt.show()

"""## 1.3 Data

"""

def kategorikan_data(x):
    if x > 7555:
        return 'Banyak'
    elif x >= 2674:
        return 'Sedang'
    else:
        return 'Sedikit'

df['kategori_data'] = df['data_used'].apply(kategorikan_data)

jumlah_data = df['kategori_data'].value_counts().reindex(['Sedikit', 'Sedang', 'Banyak'])
total_data = jumlah_data.sum()
persen_data = (jumlah_data / total_data * 100).round(1)

plt.figure(figsize=(8, 10))
bars = sns.barplot(x=jumlah_data.index, y=jumlah_data.values)

for i, bar in enumerate(bars.patches):
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 1000,
             f"{int(height)}\n({persen_data[i]}%)",
             ha='center', va='bottom', fontsize=10)

plt.title('Jumlah Pelanggan per Kategori Data Used')
plt.xlabel('Kategori Data Used')
plt.ylabel('Jumlah Pelanggan')
plt.tight_layout()
plt.show()

rata_usia_data = df.groupby('kategori_data')['age'].mean().reindex(['Sedikit', 'Sedang', 'Banyak'])

plt.figure(figsize=(7, 5))
bars = sns.barplot(x=rata_usia_data.index, y=rata_usia_data.values)

for i, bar in enumerate(bars.patches):
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 1,
             f"{height:.1f} thn",
             ha='center', va='bottom', fontsize=10)

plt.title('Rata-Rata Usia Pelanggan per Kategori Data Used')
plt.xlabel('Kategori Data Used')
plt.ylabel('Usia (Tahun)')
plt.tight_layout()
plt.show()

churn_data = df.groupby(['kategori_data', 'churn']).size().unstack(fill_value=0).reindex(['Sedikit', 'Sedang', 'Banyak'])
churn_data.columns = ['Tetap', 'Berhenti']
churn_data_plot = churn_data.reset_index().melt(id_vars='kategori_data', var_name='Status', value_name='Jumlah')

# Persen
total = churn_data_plot.groupby('kategori_data')['Jumlah'].transform('sum')
churn_data_plot['Persen'] = churn_data_plot['Jumlah'] / total * 100

plt.figure(figsize=(7, 4))
bars = sns.barplot(data=churn_data_plot, x='kategori_data', y='Jumlah', hue='Status', palette=['skyblue', 'salmon'])

for bar, (_, row) in zip(bars.patches, churn_data_plot.iterrows()):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height()/2,
             f"{row['Persen']:.1f}%", ha='center', va='center', fontsize=9, color='black')

plt.title('Status Churn per Kategori Data Used')
plt.xlabel('Kategori Data Used')
plt.ylabel('Jumlah Pelanggan')
plt.legend(title='Status')
plt.tight_layout()
plt.show()

gender_data = df.groupby(['kategori_data', 'gender']).size().reset_index(name='Jumlah')
gender_data['Persen'] = gender_data.groupby('kategori_data')['Jumlah'].transform(lambda x: x / x.sum() * 100)

plt.figure(figsize=(10, 6))
bars = sns.barplot(
    data=gender_data,
    x='kategori_data',
    y='Jumlah',
    hue='gender',
    palette='Set2',
    order=['Sedikit', 'Sedang', 'Banyak']
)

for bar in bars.patches:
    height = bar.get_height()
    width = bar.get_width()
    x = bar.get_x()
    y = height

    gender = 'F' if bar.get_facecolor() == bars.patches[0].get_facecolor() else 'M'
    kategori = gender_data['kategori_data'].unique()[int(x + width/2)]
    persen = gender_data[(gender_data['kategori_data'] == kategori) &
                        (gender_data['gender'] == gender)]['Persen'].values[0]

    bars.annotate(f"{persen:.1f}%",
                 (x + width/2, height/2),
                 ha='center', va='center',
                 fontsize=10,
                 color='black')

plt.title('Distribusi Gender per Kategori Data Used', pad=20)
plt.xlabel('Kategori Data Used')
plt.ylabel('Jumlah Pelanggan')
plt.legend(title='Gender', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

pendapatan_data = df.groupby(['kategori_data', 'kategori_pendapatan']).size().unstack(fill_value=0).reindex(['Sedikit', 'Sedang', 'Banyak'])
pendapatan_data_plot = pendapatan_data.reset_index().melt(id_vars='kategori_data', value_name='Jumlah', var_name='Pendapatan')

total = pendapatan_data_plot.groupby('kategori_data')['Jumlah'].transform('sum')
pendapatan_data_plot['Persen'] = pendapatan_data_plot['Jumlah'] / total * 100

plt.figure(figsize=(7, 4))
bars = sns.barplot(data=pendapatan_data_plot, x='kategori_data', y='Jumlah', hue='Pendapatan', palette='coolwarm')

for bar, (_, row) in zip(bars.patches, pendapatan_data_plot.iterrows()):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height()/2,
             f"{row['Persen']:.1f}%", ha='center', va='center', fontsize=9, color='black')

plt.title('Distribusi Pendapatan per Kategori Data Used')
plt.xlabel('Kategori Data Used')
plt.ylabel('Jumlah Pelanggan')
plt.legend(title='Pendapatan')
plt.tight_layout()
plt.show()

"""## Segment Pengguna"""

def tentukan_segmen(row):
    kategori = [row['kategori_panggilan'], row['kategori_sms'], row['kategori_data']]
    banyak = kategori.count('Banyak')
    sedang = kategori.count('Sedang')

    if banyak >= 2:
        return 'Heavy Users'
    elif sedang >= 2:
        return 'Medium Users'
    else:
        return 'Light Users'

df['segment_pengguna'] = df.apply(tentukan_segmen, axis=1)

rata2_segmen = df.groupby('segment_pengguna')[['calls_made', 'sms_sent', 'data_used']].mean().round(0)
rata2_segmen = rata2_segmen.reindex(['Heavy Users', 'Medium Users', 'Light Users'])
rata2_segmen.reset_index(inplace=True)

fig = make_subplots(rows=2, cols=1, shared_xaxes=True,
                    vertical_spacing=0.15,
                    subplot_titles=("Avg Calls & SMS per Segment", "Avg Data per Segment"))

fig.add_trace(
    go.Bar(
        x=rata2_segmen['segment_pengguna'],
        y=rata2_segmen['calls_made'],
        name='Avg Calls',
        marker_color='mediumpurple',
        text=rata2_segmen['calls_made'],
        textposition='auto'
    ),
    row=1, col=1
)

fig.add_trace(
    go.Bar(
        x=rata2_segmen['segment_pengguna'],
        y=rata2_segmen['sms_sent'],
        name='Avg SMS',
        marker_color='mediumseagreen',
        text=rata2_segmen['sms_sent'],
        textposition='auto'
    ),
    row=1, col=1
)

fig.add_trace(
    go.Bar(
        x=rata2_segmen['segment_pengguna'],
        y=rata2_segmen['data_used'],
        name='Avg Data',
        marker_color='orange',
        text=rata2_segmen['data_used'],
        textposition='auto'
    ),
    row=2, col=1
)

fig.update_layout(
    height=600,
    title_text='Pola Penggunaan Berdasarkan Segmen',
    barmode='group',
    showlegend=True
)

fig.update_yaxes(title_text="Jumlah", row=1, col=1)
fig.update_yaxes(title_text="Jumlah", row=2, col=1)
fig.show()

"""## 2.1

"""

total_per_provider = df['telecom_partner'].value_counts().sort_index()
churn_per_provider = df[df['churn'] == 1]['telecom_partner'].value_counts().sort_index()

summary = pd.DataFrame({
    'Total Pelanggan': total_per_provider,
    'Jumlah Churn': churn_per_provider
}).fillna(0)

summary['Jumlah Churn'] = summary['Jumlah Churn'].astype(int)
summary['Churn Rate (%)'] = (summary['Jumlah Churn'] / summary['Total Pelanggan']) * 100
summary = summary.sort_values(by='Churn Rate (%)', ascending=False)
summary

from scipy.stats import chi2_contingency
import statsmodels.stats.proportion as smp

crosstab = pd.crosstab(df['telecom_partner'], df['churn'])

chi2, p, dof, expected = chi2_contingency(crosstab)

ci_df = summary.copy()
ci_df[['lower_ci', 'upper_ci']] = ci_df.apply(
    lambda row: smp.proportion_confint(
        count=row['Jumlah Churn'],
        nobs=row['Total Pelanggan'],
        alpha=0.05,
        method='wilson'
    ), axis=1, result_type='expand'
)
ci_df

plot_data = summary.copy()
plot_data['Tetap'] = plot_data['Total Pelanggan'] - plot_data['Jumlah Churn']
plot_data = plot_data[['Tetap', 'Jumlah Churn']]

fig, ax = plt.subplots(figsize=(10, 8))

bars = plot_data.plot(
    kind='bar',
    stacked=True,
    color=['skyblue', 'salmon'],
    ax=ax,
    width=0.6
)

for idx, (tetap, churn) in enumerate(zip(plot_data['Tetap'], plot_data['Jumlah Churn'])):
    total = tetap + churn
    ax.text(idx, tetap / 2, f"{tetap}", ha='center', va='center', color='black', fontsize=9)
    ax.text(idx, tetap + churn / 2, f"{churn}", ha='center', va='center', color='white', fontsize=9)
    ax.text(idx, total + total * 0.03, f"{(churn / total) * 100:.1f}%", ha='center', va='bottom', fontsize=9, color='black')

plt.title('Total vs Churned Customers per Provider', fontsize=12)
plt.xlabel('Provider')
plt.ylabel('Jumlah Pelanggan')
plt.xticks(rotation=0)
plt.legend(['Tetap', 'Berhenti'], title='Status')
plt.tight_layout()
plt.show()

churn_dist = churn_per_provider[churn_per_provider > 0]
churn_dist.plot.pie(autopct='%1.1f%%', figsize=(5,5), startangle=90, colormap='Set3')
plt.title('Distribusi Churn Berdasarkan Provider')
plt.tight_layout()
plt.show()

tertinggi = summary['Churn Rate (%)'].idxmax()
terendah = summary['Churn Rate (%)'].idxmin()

print(f"Provider dengan churn rate tertinggi adalah: {tertinggi} ({summary.loc[tertinggi, 'Churn Rate (%)']:.2f}%)")
print(f"Provider dengan churn rate terendah adalah: {terendah} ({summary.loc[terendah, 'Churn Rate (%)']:.2f}%)")

print("\nInsight Bisnis:")
print("- Provider dengan churn tinggi perlu evaluasi pricing/service/coverage.")
print("- Ranking risiko churn dari tertinggi ke terendah:")
print(summary['Churn Rate (%)'].sort_values(ascending=False))

"""## 2.2"""

df

df['total_usage'] = df['calls_made'] + df['sms_sent'] + df['data_used']

df

df['usage_segment'] = pd.qcut(df['total_usage'], q=[0, 0.25, 0.75, 1], labels=['Low', 'Medium', 'High'])

df

usage_cols = ['calls_made', 'sms_sent', 'data_used', 'total_usage']
scaler = StandardScaler()
df_std = pd.DataFrame(scaler.fit_transform(df[usage_cols]), columns=[f'{col}_std' for col in usage_cols])

df

print(df[['calls_made', 'sms_sent', 'data_used', 'total_usage', 'usage_segment']].head())

usage_cols = ['calls_made', 'sms_sent', 'data_used']
print(df[usage_cols].describe())

plt.figure(figsize=(14, 8))
for i, col in enumerate(usage_cols, 1):
    plt.subplot(1, 3, i)
    sns.boxplot(data=df, x='churn', y=col)
    plt.title(f'{col} vs Churn')
plt.tight_layout()
plt.show()

sns.pairplot(df, vars=usage_cols, hue='churn', palette='Set1', diag_kind='kde')
plt.show()

correlation_metrics = ['calls_made', 'sms_sent', 'data_used', 'total_usage']
correlations = df[correlation_metrics + ['churn']].corr()['churn'].drop('churn')
print("Korelasi dengan Churn:\n", correlations)

segmen_churn = df.groupby('usage_segment')['churn'].agg(['count', 'sum'])
segmen_churn['churn_rate'] = segmen_churn['sum'] / segmen_churn['count'] * 100
print("Churn rate per usage segment:\n", segmen_churn)

segmen_churn['churn_rate'].plot(kind='bar', color='salmon', figsize=(6,4), title='Churn Rate per Usage Segment')
plt.ylabel('Churn Rate (%)')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

retained = df[df['churn'] == 0]
churned = df[df['churn'] == 1]

for col in ['calls_made', 'sms_sent', 'data_used', 'total_usage']:
    stat, p = mannwhitneyu(retained[col], churned[col])
    print(f"{col}: U-test p-value = {p:.4f}")

anova_result = f_oneway(*[df[df['usage_segment'] == seg]['churn'] for seg in ['Low', 'Medium', 'High']])
print(f"\nANOVA Test p-value = {anova_result.pvalue:.4f}")

features = ['calls_made', 'sms_sent', 'data_used']
X = df[features].replace([np.inf, -np.inf], np.nan).dropna()
y = df.loc[X.index, 'churn']
X = sm.add_constant(X)
logit_model = sm.Logit(y, X).fit()
print(logit_model.summary())

top_callers = df[df['calls_made'] > df['calls_made'].quantile(0.90)]
top_data_users = df[df['data_used'] > df['data_used'].quantile(0.90)]

print("Top Callers Churn Rate:", top_callers['churn'].mean() * 100)
print("Top Data Users Churn Rate:", top_data_users['churn'].mean() * 100)

"""## 2.3"""

print(df['estimated_salary'].describe())

sns.boxplot(x = df["estimated_salary"])

Q1 = df['estimated_salary'].quantile(0.25)
Q3 = df['estimated_salary'].quantile(0.75)
IQR = Q3 - Q1
outliers = df[(df['estimated_salary'] < Q1 - 1.5 * IQR) | (df['estimated_salary'] > Q3 + 1.5 * IQR)]
print(f"Jumlah outliers: {len(outliers)}")

q25 = df['estimated_salary'].quantile(0.25)
q75 = df['estimated_salary'].quantile(0.75)

def segment_salary(salary):
    if salary < q25:
        return 'Low'
    elif salary > q75:
        return 'High'
    else:
        return 'Middle'

df['salary_segment'] = df['estimated_salary'].apply(segment_salary)

salary_churn = df.groupby('salary_segment')['churn'].agg(['count', 'sum'])
salary_churn['churn_rate'] = (salary_churn['sum'] / salary_churn['count']) * 100
print(salary_churn)

print(df.groupby('churn')['estimated_salary'].mean())

churned = df[df['churn'] == 1]['estimated_salary']
retained = df[df['churn'] == 0]['estimated_salary']
t_stat, p_val = ttest_ind(churned, retained, equal_var=False)
print(f"T-test: t = {t_stat:.3f}, p = {p_val:.3f}")

contingency = pd.crosstab(df['salary_segment'], df['churn'])
chi2, p, dof, expected = chi2_contingency(contingency)
print(f"Chi-square test: chi2 = {chi2:.3f}, p = {p:.3f}")

X = df[['estimated_salary']]
y = df['churn']
X = sm.add_constant(X)
logit_model = sm.Logit(y, X).fit()
print(logit_model.summary())

"""## 3.1

"""

print(f"Churn rate: {df['churn'].mean():.2%}")

churn_by_usage = df.groupby('usage_segment', observed=False)['churn'].mean().reset_index()
print(churn_by_usage)

plt.figure(figsize=(7, 5))
sns.barplot(data=churn_by_usage, x='usage_segment', y='churn', color='salmon')

for i, row in churn_by_usage.iterrows():
    plt.text(i, row['churn'] + 0.005, f"{row['churn']*100:.1f}%", ha='center', fontsize=10)

plt.title('Churn Rate by Usage Level', fontsize=14)
plt.ylabel('Churn Rate')
plt.xlabel('Usage Level')
plt.ylim(0, 1)
plt.tight_layout()
plt.show()

high_usage_threshold = df['total_usage'].quantile(0.75)  # Top 25%
high_usage_customers = df[df['total_usage'] > high_usage_threshold]
high_usage_churn_rate = high_usage_customers['churn'].mean()

print("HIGH TOTAL USAGE ANALYSIS (Top 25%):")
print(f"   • Threshold: {high_usage_threshold:.0f}")
print(f"   • High Usage Customers: {len(high_usage_customers)}")
print(f"   • High Usage Churn Rate: {high_usage_churn_rate:.1%}")
print()

# Analyze churn by segment
usage_churn = df.groupby('usage_segment', observed=True)['churn'].agg(['count', 'sum', 'mean']).round(3)
usage_churn.columns = ['Total_Customers', 'Churned', 'Churn_Rate']

highest_risk_segment = usage_churn.loc[usage_churn['Churn_Rate'].idxmax()]

print("CHURN RATE BY USAGE SEGMENT:")
print(usage_churn)
print()

print("SEGMEN PALING BERISIKO:")
print(f"   • Segment: {usage_churn['Churn_Rate'].idxmax()}")
print(f"   • Churn Rate: {highest_risk_segment['Churn_Rate']:.1%}")
print(f"   • Customers at Risk: {int(highest_risk_segment['Churned'])}/{int(highest_risk_segment['Total_Customers'])}")
print()

"""## 3.2"""

df

df['age_group'] = pd.cut(df['age'], bins=[0, 25, 35, 50, 100],
                         labels=['<25', '25-35', '36-50', '50+'])

churn_by_age = df.groupby('age_group', observed=False)['churn'].mean().reset_index()

plt.figure(figsize=(7, 5))
sns.barplot(data=churn_by_age, x='age_group', y='churn', color='salmon')
for i, row in churn_by_age.iterrows():
    plt.text(i, row['churn'] + 0.005, f"{row['churn']*100:.1f}%", ha='center', fontsize=10)

plt.title('Churn Rate by Age Group', fontsize=14)
plt.ylabel('Churn Rate')
plt.xlabel('Age Group')
plt.ylim(0, 1)
plt.tight_layout()
plt.show()

df['num_dependents'] = pd.to_numeric(df['num_dependents'], errors='coerce')
df['dependents_group'] = pd.cut(
    df['num_dependents'],
    bins=[-1, 0, 2, 4],
    labels=['0', '1-2', '3-4'],
    include_lowest=True
)


churn_by_dependents = df.groupby('dependents_group', observed=False)['churn'].mean().reset_index()
plt.figure(figsize=(7, 5))
sns.barplot(data=churn_by_dependents, x='dependents_group', y='churn', color='salmon')
for i, row in churn_by_dependents.iterrows():
    plt.text(i, row['churn'] + 0.005, f"{row['churn']*100:.1f}%", ha='center', fontsize=10)

plt.title('Churn Rate by Number of Dependents', fontsize=14)
plt.ylabel('Churn Rate')
plt.xlabel('Dependents Group')
plt.ylim(0, 1)
plt.tight_layout()
plt.show()

"""# 5. Prediction Churn"""

df

df.info()

df = df.drop(columns=['date_of_registration', 'state', 'telecom_partner', 'state',
                      'city', 'age_group', 'dependents_group', 'salary_segment',
                      'usage_segment', 'segment_pengguna', 'kategori_pendapatan',
                      'kategori_panggilan', 'kategori_sms', 'kategori_data', 'total_usage'])

df

df.info()

df.describe()

missing_values = df.isnull().sum()
print("Jumlah nilai yang hilang di setiap kolom:\n", missing_values)

df.duplicated().sum()

sns.boxplot(x = df["age"])

sns.boxplot(x = df["num_dependents"])

sns.boxplot(x = df["estimated_salary"])

sns.boxplot(x = df["calls_made"])

sns.boxplot(x = df["sms_sent"])

sns.boxplot(x = df["data_used"])

df['gender'] = df['gender'].map({'M': 1, 'F': 0})
df

corr_matrix = df.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.4f', linewidths=0.5)

plt.title('Heatmap Korelasi')
plt.show()

df

from sklearn.model_selection import train_test_split

X = df.drop(["churn"],axis = 1)
y = df["churn"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total # Total dataset: {len(X)}')
print(f'Total # train dataset: {len(X_train)}')
print(f'Total # test dataset: {len(X_test)}')

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print("Distribusi Kelas:")
print(y.value_counts(normalize=True) * 100)

plt.figure(figsize=(6,4))
sns.countplot(x=y)
plt.title('Distribusi Kelas Churn')
plt.show()

from imblearn.over_sampling import SMOTE

sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X_train, y_train)

print("\nSetelah SMOTE:")
print(pd.Series(y_res).value_counts())

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay

rf_smote = RandomForestClassifier(n_estimators=50, random_state=42)
rf_smote.fit(X_res, y_res)
y_pred_rf_smote = rf_smote.predict(X_test)

print("\nRandom Forest + SMOTE Performance:")
print(classification_report(y_test, y_pred_rf_smote))

cm = confusion_matrix(y_test, y_pred_rf_smote)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Predicted Not Churn', 'Predicted Churn'],
            yticklabels=['Actual Not Churn', 'Actual Churn'],
            annot_kws={"size": 16},
            cbar=False)

plt.title('Confusion Matrix - Random Forest', fontsize=14, pad=20)
plt.xlabel('Predicted Label', fontsize=12)
plt.ylabel('True Label', fontsize=12)
plt.show()

knn_smote = KNeighborsClassifier(n_neighbors=7)
knn_smote.fit(X_res, y_res)
y_pred_knn_smote = knn_smote.predict(X_test)

print("\nKNN + SMOTE Performance:")
print(classification_report(y_test, y_pred_knn_smote))

cm = confusion_matrix(y_test, y_pred_knn_smote)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Predicted Not Churn', 'Predicted Churn'],
            yticklabels=['Actual Not Churn', 'Actual Churn'],
            annot_kws={"size": 16},
            cbar=False)

plt.title('Confusion Matrix - KNN', fontsize=14, pad=20)
plt.xlabel('Predicted Label', fontsize=12)
plt.ylabel('True Label', fontsize=12)
plt.show()

nb_smote = GaussianNB()
nb_smote.fit(X_res, y_res)
y_pred_nb_smote = nb_smote.predict(X_test)

print("\nNaive Bayes + SMOTE Performance:")
print(classification_report(y_test, y_pred_nb_smote))

cm = confusion_matrix(y_test, y_pred_nb_smote)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Predicted Not Churn', 'Predicted Churn'],
            yticklabels=['Actual Not Churn', 'Actual Churn'],
            annot_kws={"size": 16},
            cbar=False)

plt.title('Confusion Matrix - NB', fontsize=14, pad=20)
plt.xlabel('Predicted Label', fontsize=12)
plt.ylabel('True Label', fontsize=12)
plt.show()

pip freeze > requirements.txt